---
- name: make sure zfs is installed
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - zfs-dkms
    - zfsutils-linux
- copy:
   src: files/zfs-module.conf
   dest: /etc/modules-load.d/zfs-module.conf
   mode: "0644"
   owner: root
   group: root
  register: zfs_module_conf_file
- name: make sure zfs module is present
  shell: modprobe zfs
  when: zfs_module_conf_file.changed
- name: check if pool already exists
  shell: "zpool list | grep data || true"
  args:
    executable: /bin/bash
  register: pool_status
- name: create zfs pool
  shell: "zpool create data{% for dev in storage[ansible_nodename]['mirror'] %}{{ loop.cycle(' mirror ', ' ') }}{{ dev }}{%- endfor %}{% if storage[ansible_nodename]['cache'] is defined %} cache{% for dev in storage[ansible_nodename]['cache'] %} {{ dev }}{%- endfor %}{%- endif %}"
  args:
    executable: /bin/bash
  when: "'data' not in pool_status.stdout and (storage[ansible_nodename]['crypt'] is not defined or storage[ansible_nodename]['crypt'] != true)"
- name: create zfs with encryption
  shell: "zpool create data{% for dev in storage[ansible_nodename]['mirror'] %}{{ loop.cycle(' mirror ', ' ') }}/dev/mapper/{{ dev | regex_replace('^/dev/', '')}}_crypt{%- endfor %}{% if storage[ansible_nodename]['cache'] is defined %} cache{% for dev in storage[ansible_nodename]['cache'] %} /dev/mapper/{{ dev | regex_replace('^/dev/', '')}}_crypt{%- endfor %}{%- endif %}"
  when: "'data' not in pool_status.stdout and storage[ansible_nodename]['crypt'] is defined and storage[ansible_nodename]['crypt']"
